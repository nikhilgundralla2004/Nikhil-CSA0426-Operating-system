#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5 // number of philosophers

#define THINKING 0
#define HUNGRY 1
#define EATING 2

pthread_t philosophers[N];
sem_t forks[N];
sem_t mutex;
int state[N];

void *philosopher(void *arg) {
    int id = *(int *) arg;
    while (1) {
        // thinking
        printf("Philosopher %d is thinking\n", id);
        sleep(rand() % 5 + 1);

        // hungry
        printf("Philosopher %d is hungry\n", id);
        sem_wait(&mutex);
        state[id] = HUNGRY;
        if (state[(id + 4) % N] != EATING && state[(id + 1) % N] != EATING) {
            state[id] = EATING;
            sem_post(&forks[id]);
        }
        sem_post(&mutex);
        sem_wait(&forks[id]);

        // eating
        printf("Philosopher %d is eating\n", id);
        sleep(rand() % 5 + 1);

        // done eating
        sem_wait(&mutex);
        state[id] = THINKING;
        if (state[(id + 4) % N] != EATING && state[(id + 1) % N] != EATING) {
            sem_post(&forks[(id + 4) % N]);
            sem_post(&forks[(id + 1) % N]);
        }
        sem_post(&mutex);
    }
}

int main() {
    int i;
    int ids[N];
    srand(time(NULL));

    // initialize semaphores
    sem_init(&mutex, 0, 1);
    for (i = 0; i < N; i++) {
        sem_init(&forks[i], 0, 1);
        state[i] = THINKING;
    }

    // create philosopher threads
    for (i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // join philosopher threads
    for (i = 0; i < N; i++) {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}
